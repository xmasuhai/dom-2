{"version":3,"sources":["jquery.js"],"names":["window","jQuery","selectorOrArray","elements","document","querySelectorAll","Array","find","selector","arr","i","length","elements2","from","concat","oldApi","each","fn","call","print","console","log","parent","array","node","indexOf","parentNode","push","children","addClass","className","classList","add","end","jQuery2","jQuery3","n","$"],"mappings":"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","file":"jquery.7a6e0748.js","sourceRoot":"..\\src","sourcesContent":["window.jQuery = function (selectorOrArray) {\r\n    // this.console.log('我是jQuery')\r\n    // 核心代码 接受一个选择器；\r\n    // 根据选择器得到 一些元素；\r\n    // 返回一个对象 这个对象 上有个方法 可以操作 这些元素\r\n\r\n    /* 重载判断\r\n     ** selectorOrArray不仅接受选择器 还有数组\r\n     */\r\n    let elements // 作用域的提升  用const声明的的时候必须直接赋值且不能再改\r\n    if (typeof selectorOrArray === 'string') {\r\n        // const elements = document.querySelectorAll(selectorOrArray)\r\n        elements = document.querySelectorAll(selectorOrArray)\r\n    } else if (selectorOrArray instanceof Array) {\r\n        // const elements = selectorOrArray // 作用域的提升\r\n        elements = selectorOrArray\r\n    }\r\n    // 用const防止引用被修改\r\n    // return elements // 不返回此对象\r\n    // 而是返回一个 API 可以操作 elements\r\n    /*\r\n    const api_test = {\r\n            //ES6\r\n            doSth() {\r\n                console.log(elements) // 闭包：函数访问外部 变量\r\n            },\r\n            // ES5\r\n            \"doOther\": function () {\r\n                console.log(elements)\r\n            }\r\n        }\r\n    */\r\n    /*\r\n    const api = {\r\n        addClass(className) {\r\n            // 遍历所有刚才获取的elements 元素，添加 .className 样式\r\n            for (let i = 0; i < elements.length; i++) {\r\n                elements[i].classList.add(className)\r\n            }\r\n            return this // api\r\n        }\r\n    }\r\n        return api // 这里的 this 是 window // window.jQuery\r\n        // api 的名字其实没有必要 直接返回对象\r\n     */\r\n    // api 的名字没有必要 直接返回对象本身\r\n    // api 对象通常可以在外部的环境中 创建\r\n    // JQ的核心思想\r\n    // 提供一个函数 这个函数接收一个CSS选择器\r\n    // 通过选择器，获取到一些元素 但并不返回元素\r\n    // 而是返回一个对象 这个对象里包含一些方法（函数）\r\n    // 这些方法（函数）去操作获取到的元素\r\n    // 即用闭包维持 函数外的变量 防止被回收机制删除\r\n    // 创建的JQ对象 api 作为返回值 从前面传递到后面 来链式调用\r\n    // 调用后 才知道 this 的具体指向\r\n    // 直接创建匿名的对象 进行链式操作 声明一个对象紧接再调用它 且只用到一次 省略变量名\r\n    // 省略中间过程 留下最简练代码\r\n    return {\r\n        find(selector) {\r\n            let arr = []\r\n            for (let i = 0; i < elements.length; i++) {\r\n                const elements2 = Array.from(elements[i].querySelectorAll(selector))\r\n                arr = arr.concat(elements2)\r\n            }\r\n            // elements = arr // 当在改变elements的时候，会影响之前所有保留api对象的引用\r\n            // return this // 返回的是数组 无法进行链式调用\r\n            // return newApi // 不能用原来的api对象 需要更新 api引用\r\n            //\r\n            // const newApi = jQuery(arr) //不能用原来的api对象，需要用jQuery构造一个新的api\r\n            // return newApi\r\n            arr.oldApi = this // this是旧的api // oldApi是否只放到数组上 而未放到api上\r\n            return jQuery(arr)\r\n        },\r\n        each(fn) { // 遍历当前所有元素 即forEach()方法\r\n            for (let i = 0; i < elements.length; i++) {\r\n                fn.call(null, elements[i], i)\r\n            }\r\n            return this // this就是这个被省略掉的、匿名的api\r\n        },\r\n        print() {\r\n            console.log(elements) // elements就是对应的元素们\r\n        },\r\n        parent() {\r\n            const array = []\r\n            /* this 就是当前这个被省略掉的api */\r\n            this.each((node) => {\r\n                /* 不重复同样的节点 */\r\n                // if (array.indexOf(node.parentNode) >= 0) // 第0个 或 第一个 有就不push\r\n                if (array.indexOf(node.parentNode) === -1) { // 第0个 或 第一个 有就不push\r\n                    array.push(node.parentNode) // 没有才push\r\n                }\r\n            })\r\n            return jQuery(array)\r\n        },\r\n        children() {\r\n            const array = []\r\n            /* this 就是当前这个被省略掉的api */\r\n            this.each((node) => { // 遍历 每次 对于每个元素 获取子节点 把不同的放入数组\r\n                // array.push(node.children) // 没有把数组摊平 有不同结构\r\n                array.push(...node.children) // 展开操作符... 拆开所有元素 并且合并为一个数组\r\n                // 等价于 array.push(node.children[0], node.children[1],...[2]...)\r\n            })\r\n            return jQuery(array)\r\n        },\r\n        addClass(className) {\r\n            /* 遍历所有刚才获取的elements 元素，添加 .className 样式 */\r\n            for (let i = 0; i < elements.length; i++) {\r\n                elements[i].classList.add(className)\r\n            }\r\n            return this\r\n        },\r\n        oldApi: selectorOrArray.oldApi, // 将oldApi属性加到selectorOrArray上\r\n        end() {\r\n            return this.oldApi // this是新的api2\r\n        }\r\n    }\r\n}\r\n\r\nwindow.jQuery2 = function (selectorOrArray) {\r\n    let elements\r\n    if (typeof selectorOrArray === 'string') {\r\n        elements = document.querySelectorAll(selectorOrArray)\r\n    } else if (selectorOrArray instanceof Array) {\r\n        elements = selectorOrArray\r\n    }\r\n    return {\r\n        addClass(className) {\r\n            this.each((node) => {\r\n                node.classList.add(className)\r\n            })\r\n            return this\r\n        },\r\n        find(selector) {\r\n            let arr = []\r\n            this.each((node) => {\r\n                const elements2 = Array.from(node.querySelectorAll(selector))\r\n                arr = arr.concat(elements2)\r\n            })\r\n            arr.oldApi = this // this是旧的api // oldApi是否只放到数组上 而未放到api上\r\n            return jQuery(arr)\r\n        },\r\n        each(fn) {\r\n            for (let i = 0; i < elements.length; i++) {\r\n                fn.call(null, elements[i], i)\r\n            }\r\n            return this\r\n        }\r\n    }\r\n}\r\n\r\nwindow.jQuery3 = function (selectorOrArray) {\r\n    let elements\r\n    if (typeof selectorOrArray === 'string') {\r\n        elements = document.querySelectorAll(selectorOrArray)\r\n    } else if (selectorOrArray instanceof Array) {\r\n        elements = selectorOrArray\r\n    }\r\n    return {\r\n        addClass(className) {\r\n            this.each(n => n.classList.add(className))\r\n        },\r\n        find(selector) {\r\n            let array = []\r\n            this.each(n => {\r\n                array.push(...n.querySelectorAll(selector))\r\n            })\r\n            return jQuery(array)\r\n        },\r\n        each(fn) {\r\n            for (let i = 0; i < elements.length; i++) {\r\n                fn.call(null, elements[i], i)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nwindow.$ = window.jQuery3\r\n\r\n$('#test').find('.child').addClass('red') // 请确保这句话成功执行"]}